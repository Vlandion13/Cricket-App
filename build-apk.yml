name: Build Flutter APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      FLUTTER_VERSION: '3.22.0'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install dependencies
        run: flutter pub get

      # If keystore secret exists, create key.properties and the keystore file
      - name: Restore keystore (if secrets provided)
        if: secrets.KEYSTORE_BASE64 != ''
        run: |
          mkdir -p android/app
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/my-release-key.jks
          cat > android/key.properties <<EOF
          storePassword=${{ secrets.KEYSTORE_STORE_PASSWORD }}
          keyPassword=${{ secrets.KEYSTORE_KEY_PASSWORD }}
          keyAlias=${{ secrets.KEYSTORE_ALIAS }}
          storeFile=app/my-release-key.jks
          EOF

      - name: Ensure AndroidX (optional but helpful)
        run: |
          mkdir -p android
          # ensure properties exist
          grep -q "android.useAndroidX" android/gradle.properties || echo "android.useAndroidX=true" >> android/gradle.properties
          grep -q "android.enableJetifier" android/gradle.properties || echo "android.enableJetifier=true" >> android/gradle.properties

      - name: Build APK (release)
        run: flutter build apk --release

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: cricket-score-app
          path: build/app/outputs/flutter-apk/*.apk

      - name: Create GitHub Release and attach APK
        uses: ncipollo/release-action@v1
        with:
          tag: apk-${{ github.run_id }}
          name: APK build ${{ github.run_id }}
          files: build/app/outputs/flutter-apk/*.apk
